# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
# Disable context access warnings for secrets usage
name: CI/CD Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    # Run tests on any PR, regardless of target branch
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.2.0

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }} # github-actions-ignore
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create Firebase config file
        run: |
          cat << EOF > src/app/firebase.config.ts
          export const firebaseConfig = {
            apiKey: 'fake-api-key',
            authDomain: 'fake-auth-domain',
            projectId: 'pip-cost-sharing',
            storageBucket: 'fake-storage-bucket',
            messagingSenderId: 'fake-sender-id',
            appId: 'fake-app-id',
            measurementId: 'fake-measurement-id',
          };
          EOF
      
      - name: Create Github config file
        run: |
          cat << EOF > src/app/github.config.ts
          export const githubConfig = {
            personalAccessToken: 'fake-token',
          };
          EOF

      - name: Install Playwright Browsers
        run: pnpm e2e:install --with-deps

      - name: Install Firebase CLI
        if: |
          github.event_name == 'push' ||
          (!contains(github.event.pull_request.title, '[skip e2e]') &&
           !contains(github.event.pull_request.title, '[skip tests]') &&
           !contains(github.event.pull_request.title, '[no e2e]') &&
           !contains(github.event.pull_request.title, 'chore:'))
        run: npm install -g firebase-tools

      - name: Start Firebase Emulators
        if: |
          github.event_name == 'push' ||
          (!contains(github.event.pull_request.title, '[skip e2e]') &&
           !contains(github.event.pull_request.title, '[skip tests]') &&
           !contains(github.event.pull_request.title, '[no e2e]') &&
           !contains(github.event.pull_request.title, 'chore:'))
        run: |
          firebase emulators:start --only auth,firestore &
          echo "Waiting for emulators to start..."
          sleep 15
          curl -f http://localhost:8080 || (echo "Firestore emulator not ready" && exit 1)
          curl -f http://localhost:9099 || (echo "Auth emulator not ready" && exit 1)
          echo "Firebase emulators are ready!"

      - name: Run Core E2E Tests Only
        if: |
          github.event_name == 'push' ||
          (!contains(github.event.pull_request.title, '[skip e2e]') &&
           !contains(github.event.pull_request.title, '[skip tests]') &&
           !contains(github.event.pull_request.title, '[no e2e]') &&
           !contains(github.event.pull_request.title, 'chore:'))
        run: pnpm e2e:ci:fast
        env:
          CI: true

      - name: Stop Firebase Emulators
        if: always()
        run: |
          pkill -f firebase || true

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  build_and_deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.2.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create Firebase config file
        run: |
          cat << EOF > src/app/firebase.config.ts
          export const firebaseConfig = {
            apiKey: '${{ secrets.FIREBASE_API_KEY }}',
            authDomain: '${{ secrets.FIREBASE_AUTH_DOMAIN }}',
            projectId: '${{ secrets.FIREBASE_PROJECT_ID }}',
            storageBucket: '${{ secrets.FIREBASE_STORAGE_BUCKET }}',
            messagingSenderId: '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}',
            appId: '${{ secrets.FIREBASE_APP_ID }}',
            measurementId: '${{ secrets.FIREBASE_MEASUREMENT_ID }}',
          };
          EOF
      
      - name: Create Github config file
        run: |
          cat << EOF > src/app/github.config.ts
          export const githubConfig = {
            personalAccessToken: '${{ secrets.PERSONAL_ACCESS_TOKEN }}',
          };
          EOF

      - name: Build Angular App
        run: pnpm build:ci

      - name: Update Firebase CLI
        run: pnpm add -g firebase-tools
        
      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0 
        with:
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          projectId: 'pip-cost-sharing'
          channelId: live
