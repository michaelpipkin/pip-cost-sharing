# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
# Disable context access warnings for secrets usage
name: Deploy Pipeline
on:
  push:
    branches:
      - release
jobs:
  deploy_and_merge:
    runs-on: ubuntu-latest
    # Only run when pushing to release branch
    if: github.ref == 'refs/heads/release' && github.event_name == 'push'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.2.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for functions changes
        id: functions-changes
        run: |
          if git diff --quiet HEAD~1 HEAD -- functions/; then
            echo "functions_changed=false" >> $GITHUB_OUTPUT
            echo "No changes detected in functions folder"
          else
            echo "functions_changed=true" >> $GITHUB_OUTPUT
            echo "Changes detected in functions folder"
          fi

      - name: Create Firebase config file
        run: |
          cat << EOF > src/app/firebase.config.ts
          export const firebaseConfig = {
            apiKey: '${{ secrets.FIREBASE_API_KEY }}',
            authDomain: '${{ secrets.FIREBASE_AUTH_DOMAIN }}',
            projectId: '${{ secrets.FIREBASE_PROJECT_ID }}',
            storageBucket: '${{ secrets.FIREBASE_STORAGE_BUCKET }}',
            messagingSenderId: '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}',
            appId: '${{ secrets.FIREBASE_APP_ID }}',
            measurementId: '${{ secrets.FIREBASE_MEASUREMENT_ID }}',
          };
          EOF
      
      - name: Create Github config file
        run: |
          cat << EOF > src/app/github.config.ts
          export const githubConfig = {
            personalAccessToken: '${{ secrets.PERSONAL_ACCESS_TOKEN }}',
          };
          EOF

      - name: Install functions dependencies
        if: steps.functions-changes.outputs.functions_changed == 'true'
        run: cd functions && pnpm install

      - name: Build Angular App
        run: pnpm build:ci

      - name: Update Firebase CLI
        run: pnpm add -g firebase-tools
        
      - name: Deploy Firebase Functions
        if: steps.functions-changes.outputs.functions_changed == 'true'
        env:
          GOOGLE_APPLICATION_CREDENTIALS: service-account-key.json
          FIREBASE_CLI_EXPERIMENTS: webframeworks
        run: |
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}' > service-account-key.json
          firebase deploy --only functions --project pip-cost-sharing --non-interactive
          rm service-account-key.json

      - name: Deploy to Firebase Hosting
        id: deploy
        uses: FirebaseExtended/action-hosting-deploy@v0 
        with:
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          projectId: 'pip-cost-sharing'
          channelId: live

      - name: Configure Git for merge
        if: steps.deploy.outcome == 'success'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Setup SSH Deploy Key
        if: steps.deploy.outcome == 'success'
        run: |
          # Create SSH directory
          mkdir -p ~/.ssh
          
          # Add the private key (preserve newlines)
          echo "${{ secrets.DEPLOY_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Debug: Check if key file was created correctly
          echo "Key file size: $(wc -c < ~/.ssh/deploy_key)"
          echo "Key file first line: $(head -1 ~/.ssh/deploy_key)"
          echo "Key file last line: $(tail -1 ~/.ssh/deploy_key)"
          
          # Add GitHub to known hosts
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          
          # Start SSH agent and add the key
          eval "$(ssh-agent -s)"
          echo "SSH_AGENT_PID=$SSH_AGENT_PID" >> $GITHUB_ENV
          echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> $GITHUB_ENV
          
          # Add the key to the agent
          ssh-add ~/.ssh/deploy_key
          
          # Test SSH connection
          ssh -T git@github.com || echo "SSH test completed (exit code $?)"

      - name: Merge release to main branch
        if: steps.deploy.outcome == 'success'
        id: merge-to-main
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Set up SSH authentication for git operations
          git remote set-url origin git@github.com:${{ github.repository }}.git
          
          # Fetch the latest main branch
          git fetch origin main
          
          # Switch to main branch
          git checkout main
          
          # Merge release branch into main with no fast-forward to preserve history
          git merge origin/release --no-ff -m "chore: merge release to main after successful deployment v${{ github.run_number }}"
          
          # Push the updated main branch
          if git push origin main; then
            echo "Successfully merged release to main branch"
            echo "merge_success=true" >> $GITHUB_OUTPUT
          else
            echo "Failed to push merge to main branch"
            echo "merge_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Cleanup SSH key
        if: always() && steps.deploy.outcome == 'success'
        run: |
          # Remove the private key file
          rm -f ~/.ssh/deploy_key
          # Kill the SSH agent if it's running
          if [ -n "$SSH_AGENT_PID" ]; then
            ssh-agent -k
          fi

      - name: Create deployment success comment
        if: steps.deploy.outcome == 'success' && steps.merge-to-main.outputs.merge_success == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            // Find the most recent merged PR to release branch
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              base: 'release',
              sort: 'updated',
              direction: 'desc',
              per_page: 1
            });
            
            if (prs.length > 0 && prs[0].merged_at) {
              const pr = prs[0];
              await github.rest.issues.createComment({
                issue_number: pr.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `üöÄ **Deployment Successful!**\n\nThe application has been successfully deployed to production and the code has been merged to the main branch.\n\n‚úÖ Deployment URL: [View Live Site](https://pip-cost-sharing.web.app)\n‚úÖ Release branch merged to main using deploy key\n‚úÖ Main branch now contains the latest deployed code`
              });
            }

      - name: Handle deployment failure
        if: steps.deploy.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            // Find the most recent merged PR to release branch
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              base: 'release',
              sort: 'updated',
              direction: 'desc',
              per_page: 1
            });
            
            if (prs.length > 0 && prs[0].merged_at) {
              const pr = prs[0];
              await github.rest.issues.createComment({
                issue_number: pr.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `‚ùå **Deployment Failed!**\n\nThe deployment to production failed. The code was NOT merged to the main branch.\n\n‚ö†Ô∏è Please check the deployment logs and fix any issues before attempting another deployment.\n‚ö†Ô∏è Main branch remains unchanged and contains only successfully deployed code.`
              });
            }
            
            // Also fail the workflow to make the failure visible
            core.setFailed('Deployment to Firebase failed')

      - name: Handle merge failure
        if: steps.deploy.outcome == 'success' && steps.merge-to-main.outputs.merge_success == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            // Find the most recent merged PR to release branch
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              base: 'release',
              sort: 'updated',
              direction: 'desc',
              per_page: 1
            });
            
            if (prs.length > 0 && prs[0].merged_at) {
              const pr = prs[0];
              await github.rest.issues.createComment({
                issue_number: pr.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `‚ö†Ô∏è **Deployment Successful, but Merge Failed!**\n\nThe deployment to production was successful, but the automatic merge to main branch failed.\n\n‚úÖ Deployment URL: [View Live Site](https://pip-cost-sharing.web.app)\n‚ùå Failed to merge release to main branch\n\n**Action Required**: Please manually create a PR from \`release\` to \`main\` branch to update the main branch with the deployed code.`
              });
            }
            
            // Set warning but don't fail the entire workflow since deployment succeeded
            core.warning('Deployment succeeded but merge to main failed - manual intervention required')
