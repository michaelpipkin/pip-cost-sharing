# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
# Disable context access warnings for secrets usage
name: CI/CD Pipeline
on:
  push:
    branches:
      - release
  pull_request:
    branches:
      - release
jobs:
  test:
    runs-on: ubuntu-latest
    # Only run tests on PRs to release branch
    if: |
      github.event_name == 'pull_request' &&
      github.base_ref == 'release' &&
      !contains(github.event.pull_request.title, '[skip tests]')
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.2.0

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }} # github-actions-ignore
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create Firebase config file
        run: |
          cat << EOF > src/app/firebase.config.ts
          export const firebaseConfig = {
            apiKey: 'fake-api-key',
            authDomain: 'fake-auth-domain',
            projectId: 'pip-cost-sharing',
            storageBucket: 'fake-storage-bucket',
            messagingSenderId: 'fake-sender-id',
            appId: 'fake-app-id',
            measurementId: 'fake-measurement-id',
          };
          EOF
      
      - name: Create Github config file
        run: |
          cat << EOF > src/app/github.config.ts
          export const githubConfig = {
            personalAccessToken: 'fake-token',
          };
          EOF

      - name: Install Playwright Browsers
        run: pnpm e2e:install --with-deps

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Start Firebase Emulators
        run: |
          firebase emulators:start --only auth,firestore &
          echo "Waiting for emulators to start..."
          sleep 15
          curl -f http://localhost:8080 || (echo "Firestore emulator not ready" && exit 1)
          curl -f http://localhost:9099 || (echo "Auth emulator not ready" && exit 1)
          echo "Firebase emulators are ready!"

      - name: Run Core E2E Tests Only
        run: pnpm e2e:ci:fast
        env:
          CI: true

      - name: Stop Firebase Emulators
        if: always()
        run: |
          pkill -f firebase || true

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  deploy_and_merge:
    runs-on: ubuntu-latest
    # Only run when pushing to release branch (i.e., when PR is merged)
    if: github.ref == 'refs/heads/release' && github.event_name == 'push'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.2.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create Firebase config file
        run: |
          cat << EOF > src/app/firebase.config.ts
          export const firebaseConfig = {
            apiKey: '${{ secrets.FIREBASE_API_KEY }}',
            authDomain: '${{ secrets.FIREBASE_AUTH_DOMAIN }}',
            projectId: '${{ secrets.FIREBASE_PROJECT_ID }}',
            storageBucket: '${{ secrets.FIREBASE_STORAGE_BUCKET }}',
            messagingSenderId: '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}',
            appId: '${{ secrets.FIREBASE_APP_ID }}',
            measurementId: '${{ secrets.FIREBASE_MEASUREMENT_ID }}',
          };
          EOF
      
      - name: Create Github config file
        run: |
          cat << EOF > src/app/github.config.ts
          export const githubConfig = {
            personalAccessToken: '${{ secrets.PERSONAL_ACCESS_TOKEN }}',
          };
          EOF

      - name: Build Angular App
        run: pnpm build:ci

      - name: Update Firebase CLI
        run: pnpm add -g firebase-tools
        
      - name: Deploy to Firebase Hosting
        id: deploy
        uses: FirebaseExtended/action-hosting-deploy@v0 
        with:
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          projectId: 'pip-cost-sharing'
          channelId: live

      - name: Configure Git for merge
        if: steps.deploy.outcome == 'success'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Create PR to merge release into main
        if: steps.deploy.outcome == 'success'
        id: create-pr
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          # Check if there's already an open PR from release to main
          existing_pr=$(gh pr list --head release --base main --state open --json number --jq '.[0].number // empty')
          
          if [ -n "$existing_pr" ]; then
            echo "Found existing PR #$existing_pr from release to main"
            pr_number=$existing_pr
          else
            # Create a new PR from release to main
            pr_number=$(gh pr create \
              --title "chore: merge release to main after successful deployment" \
              --body "üöÄ **Automated Release Merge**

          This PR was automatically created after successful deployment to production.

          ‚úÖ Deployment successful
          ‚úÖ All tests passed  
          ‚úÖ Version incremented

          This merge ensures the main branch contains only successfully deployed code." \
              --head release \
              --base main \
              --assignee @me \
              --json number --jq '.number')
            echo "Created new PR #$pr_number from release to main"
          fi
          
          # Try to auto-merge the PR
          if gh pr merge $pr_number --merge --delete-branch=false; then
            echo "Successfully merged PR #$pr_number"
            echo "pr_number=$pr_number" >> $GITHUB_OUTPUT
            echo "merge_success=true" >> $GITHUB_OUTPUT
          else
            echo "Failed to auto-merge PR #$pr_number - may need manual approval"
            echo "pr_number=$pr_number" >> $GITHUB_OUTPUT
            echo "merge_success=false" >> $GITHUB_OUTPUT
          fi

      - name: Create deployment success comment
        if: steps.deploy.outcome == 'success' && steps.create-pr.outputs.merge_success == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            // Find the most recent merged PR to release branch
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              base: 'release',
              sort: 'updated',
              direction: 'desc',
              per_page: 1
            });
            
            if (prs.length > 0 && prs[0].merged_at) {
              const pr = prs[0];
              const mergedPrNumber = '${{ steps.create-pr.outputs.pr_number }}';
              await github.rest.issues.createComment({
                issue_number: pr.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `üöÄ **Deployment Successful!**\n\nThe application has been successfully deployed to production and the code has been merged to the main branch.\n\n‚úÖ Deployment URL: [View Live Site](https://pip-cost-sharing.web.app)\n‚úÖ Release branch merged to main via PR #${mergedPrNumber}\n‚úÖ Main branch now contains the latest deployed code`
              });
            }

      - name: Handle deployment failure
        if: steps.deploy.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            // Find the most recent merged PR to release branch
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              base: 'release',
              sort: 'updated',
              direction: 'desc',
              per_page: 1
            });
            
            if (prs.length > 0 && prs[0].merged_at) {
              const pr = prs[0];
              await github.rest.issues.createComment({
                issue_number: pr.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `‚ùå **Deployment Failed!**\n\nThe deployment to production failed. The code was NOT merged to the main branch.\n\n‚ö†Ô∏è Please check the deployment logs and fix any issues before attempting another deployment.\n‚ö†Ô∏è Main branch remains unchanged and contains only successfully deployed code.`
              });
            }
            
            // Also fail the workflow to make the failure visible
            core.setFailed('Deployment to Firebase failed')

      - name: Handle merge failure
        if: steps.deploy.outcome == 'success' && steps.create-pr.outputs.merge_success == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            // Find the most recent merged PR to release branch
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              base: 'release',
              sort: 'updated',
              direction: 'desc',
              per_page: 1
            });
            
            if (prs.length > 0 && prs[0].merged_at) {
              const pr = prs[0];
              const prNumber = '${{ steps.create-pr.outputs.pr_number }}';
              await github.rest.issues.createComment({
                issue_number: pr.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `‚ö†Ô∏è **Deployment Successful, but Auto-Merge Failed!**\n\nThe deployment to production was successful, but the automatic merge to main branch failed (likely due to branch protection requiring manual approval).\n\n‚úÖ Deployment URL: [View Live Site](https://pip-cost-sharing.web.app)\n‚ö†Ô∏è PR #${prNumber} created but needs manual merge\n\n**Action Required**: Please manually approve and merge PR #${prNumber} to update the main branch with the deployed code.`
              });
            }
            
            // Set warning but don't fail the entire workflow since deployment succeeded
            core.warning('Deployment succeeded but auto-merge failed - manual intervention required for PR #${{ steps.create-pr.outputs.pr_number }}')
