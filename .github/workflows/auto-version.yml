# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Auto Version Increment

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - release

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  # First run tests to ensure code quality before version bump
  test:
    runs-on: ubuntu-latest
    # Always run the test job on PRs to release branch
    outputs:
      skip: ${{ steps.skip-check.outputs.skip }}
    steps:
      - name: Check if tests should be skipped
        id: skip-check
        run: |
          if [[ "${{ github.event.pull_request.title }}" == *"[skip tests]"* ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Tests will be skipped due to [skip tests] in PR title"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Tests will run normally"
          fi

      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.2.0

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }} # github-actions-ignore
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create Firebase config file
        run: |
          cat << EOF > src/app/firebase.config.ts
          export const firebaseConfig = {
            apiKey: 'fake-api-key',
            authDomain: 'fake-auth-domain',
            projectId: 'pip-cost-sharing',
            storageBucket: 'fake-storage-bucket',
            messagingSenderId: 'fake-sender-id',
            appId: 'fake-app-id',
            measurementId: 'fake-measurement-id',
          };
          EOF
      
      - name: Create Github config file
        run: |
          cat << EOF > src/app/github.config.ts
          export const githubConfig = {
            personalAccessToken: 'fake-token',
          };
          EOF

      - name: Install Playwright Browsers
        if: steps.skip-check.outputs.skip == 'false'
        run: pnpm e2e:install --with-deps

      - name: Install Firebase CLI
        if: steps.skip-check.outputs.skip == 'false'
        run: npm install -g firebase-tools

      - name: Start Firebase Emulators
        if: steps.skip-check.outputs.skip == 'false'
        run: |
          firebase emulators:start --only auth,firestore &
          echo "Waiting for emulators to start..."
          sleep 15
          curl -f http://localhost:8080 || (echo "Firestore emulator not ready" && exit 1)
          curl -f http://localhost:9099 || (echo "Auth emulator not ready" && exit 1)
          echo "Firebase emulators are ready!"

      - name: Run Core E2E Tests Only
        if: steps.skip-check.outputs.skip == 'false'
        run: pnpm e2e:ci:fast
        env:
          CI: true

      - name: Stop Firebase Emulators
        if: always() && steps.skip-check.outputs.skip == 'false'
        run: |
          pkill -f firebase || true

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always() && steps.skip-check.outputs.skip == 'false'
        with:
          name: playwright-report-version-check
          path: playwright-report/
          retention-days: 30

      - name: Mark tests as skipped
        if: steps.skip-check.outputs.skip == 'true'
        run: |
          echo "‚úÖ Tests skipped as requested via [skip tests] in PR title"
          echo "Job marked as successful to satisfy branch protection requirements"
          echo "Setup steps completed successfully - dependencies and environment verified"

  auto-version:
    runs-on: ubuntu-latest
    # Always run version bump after test job completes successfully
    needs: [test]
    if: |
      always() &&
      needs.test.result == 'success' &&
      !contains(github.event.pull_request.title, 'version bump') &&
      !contains(github.event.pull_request.title, 'bump version') &&
      !contains(github.event.pull_request.title, 'chore: bump') &&
      !contains(github.event.pull_request.title, 'release')
    
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.2.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Get current version
        id: current-version
        run: |
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Check if version was recently bumped
        id: version-check
        run: |
          # Check if the last commit was already a version bump
          last_commit_msg=$(git log -1 --pretty=format:"%s")
          if [[ "$last_commit_msg" == *"chore: bump version"* ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "Version was already bumped in the last commit: $last_commit_msg"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "No recent version bump found, proceeding with increment"
          fi

      - name: Increment patch version
        if: steps.version-check.outputs.skip == 'false'
        run: npm --no-git-tag-version version patch

      - name: Get new version
        if: steps.version-check.outputs.skip == 'false'
        id: new-version
        run: |
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Configure Git
        if: steps.version-check.outputs.skip == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Commit version bump
        if: steps.version-check.outputs.skip == 'false'
        run: |
          git add package.json
          git commit -m "chore: bump version from ${{ steps.current-version.outputs.version }} to ${{ steps.new-version.outputs.version }}"
          git push

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const wasSkipped = '${{ steps.version-check.outputs.skip }}' === 'true';
            const testsWereSkipped = '${{ needs.test.outputs.skip }}' === 'true';
            
            let body;
            if (wasSkipped) {
              body = `‚ÑπÔ∏è **Version Bump Skipped**\n\nVersion bump was skipped because the last commit already contains a version bump.`;
            } else if (testsWereSkipped) {
              body = `üöÄ **Auto Version Bump (Tests Skipped)**\n\nTests were skipped via \`[skip tests]\` in PR title. Version automatically incremented from \`${{ steps.current-version.outputs.version }}\` to \`${{ steps.new-version.outputs.version }}\` for release branch.`;
            } else {
              body = `üöÄ **Auto Version Bump**\n\nTests passed! Version automatically incremented from \`${{ steps.current-version.outputs.version }}\` to \`${{ steps.new-version.outputs.version }}\` for release branch.`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })
